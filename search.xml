<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>me</title>
    <url>/life/life/me/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>关于</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程与 JS 异步编程</title>
    <url>/notes/notes/functional-programming/</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ul>
<li>对运算过程进行抽象，用来描述数据(函数)的映射</li>
<li>不是程序中的方法，而是数学中的函数</li>
</ul>
<ol>
<li><p>函数是一等公民：</p>
<ul>
<li>函数可以存在变量中</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
</ol>
<ul>
<li>函数作为参数</li>
</ul>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">functionforEach (<span class="keyword">array</span>, <span class="function"><span class="keyword">fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">array</span>.length; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fn</span><span class="params">(<span class="keyword">array</span>[i])</span></span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数作为返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>高阶函数：</p>
<ul>
<li><p>可以把函数作为参数传递给另一个函数</p>
</li>
<li><p>可以把函数作为另一个函数的返回结果</p>
<ul>
<li><p>使用高阶函数的意义：<br>不用关注细节，只关注目标<br>用来抽象通用问题<br>使代码更简洁</p>
</li>
<li><p>常用的高阶函数：forEach，map，filter，every，some，find，findIndex，reduce，sort</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>闭包：</p>
<ul>
<li><p>函数和其周围的状态(词法环境)的引用捆绑在一起形成闭包</p>
</li>
<li><p>可以在另一个作用域中调用一个函数的内部函数并访问到该函数的作用域中的成员</p>
<ul>
<li>闭包的本质：函数在执行的时候会放到一个执行栈上当函数执行完毕之后会从执行栈上移除，但是堆上的作用域成员因为被外部引用不能释放，因此内部函数依然可以访问外部函数的成员</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯函数：</p>
<ul>
<li>相同的输入永远会得到相同的输出，而且没有任何可观察的副作用<ul>
<li>好处：可缓存，可测试，并行处理</li>
</ul>
</li>
</ul>
</li>
<li><p>副作用：</p>
<ul>
<li>副作用让一个函数变的不纯(如上例)，纯函数的根据相同的输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用。<ul>
<li>来源：配置文件，数据库，获取用户输入…</li>
</ul>
</li>
</ul>
</li>
<li><p>柯里化：</p>
<ul>
<li><p>当一个函数有多个参数的时候先传递一部分参数调用它（这部分参数以后永远不变）</p>
</li>
<li><p>然后返回一个新的函数接收剩余的参数，返回结果</p>
<ul>
<li>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</li>
<li>这是一种对函数参数的’缓存’</li>
<li>让函数变的更灵活，让函数的粒度更小</li>
<li>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li>
</ul>
</li>
</ul>
</li>
<li><p>函数组合：</p>
<ul>
<li>函数组合可以让我们把细粒度的函数重新组合生成一个新的函数<ul>
<li>如果一个函数要经过多个函数处理才能得到最终值，这个时候可以把中间过程的函数合并成一个函数</li>
<li>函数就像是数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li>
<li>函数组合默认是从右到左执行</li>
</ul>
</li>
</ul>
</li>
<li><p>管道</p>
</li>
<li><p>函子</p>
</li>
</ol>
<ul>
<li><p>容器：包含值和值的变形关系，这个变形关系就是函数</p>
</li>
<li><p>函子：是一个特殊的容器，通过一个普通的对象来实现，该对象有 map 方法，map 方法可以运行一个函数对值进行处理（变形关系）</p>
<ul>
<li>函数式编程的运算不直接操作值，而是由函子完成</li>
<li>函子就是一个实现了 map 契约的对象</li>
<li>我们可以把函子想象成一个盒子，这个盒子里封装了一个值</li>
<li>想要处理盒子中的值，我们需要给盒子的 map 方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理</li>
<li>最终 map 方法返回一个包含新值的盒子（函子）</li>
</ul>
</li>
<li><p>MayBe 函子的作用就是可以对外部的空值情况做处理（控制副作用在允许的范围）</p>
</li>
<li><p>异常会让函数变的不纯，Either 函子可以用来做异常处理</p>
</li>
<li><p>IO 函子可以把不纯的动作存储到 _value 中，延迟执行这个不纯的操作(惰性执行)，包装当前的操作纯，IO 函子可以把不纯的动作存储到 _value 中，延迟执行这个不纯的操作(惰性执行)，包装当前的操作纯</p>
</li>
<li><p>Pointed 函子是实现了 of 静态方法的函子，of 方法是为了避免使用 new 来创建对象，更深层的含义是 of 方法用来把值放到上下文 Context（把值放到容器中，使用 map 来处理值）</p>
</li>
<li><p>Monad 函子是可以变扁的 Pointed 函子，IO(IO(x))，一个函子如果具有 join 和 of 两个方法并遵守一些定律就是一个 Monad</p>
</li>
</ul>
<p>&nbsp;</p>
<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><ol>
<li><p>同步模式与异步模式</p>
<ul>
<li>单线程：在 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，一般称它为主线程。但是实际上还存在其他的线程，可以称之为工作线程。JS 的单线程能够提高工作效率。JavaScript 的主要用途是与用户互动，以及操作 DOM，这就决定了它只能是单线程。单线程意味着前一个任务结束，才会执行后一个任务。</li>
<li>同步：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。如果在函数 A 返回的时候，调用者就能够得到预期的结果（即拿到了预期的返回值或者看到了预期的效果），那么这个函数就是同步的</li>
<li>异步：不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。如果在函数 A 返回的时候，调用者还不能马上得到预期的结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的 。</li>
<li>同步与异步的区别：同步可以保证顺序一致，但是容易导致阻塞；异步可以解决阻塞问题，但是会改变顺序性。</li>
</ul>
</li>
<li><p>事件循环与消息队列</p>
<ul>
<li>事件循环：是指主线程重复从消息队列中取消息，执行的过程<br><img src="/notes/notes/functional-programming/img/EventLoop.jpg" alt="事件循环"></li>
<li>消息队列：是一个先进先出的队列，它里面存放这各种消息。<br><img src="/notes/notes/functional-programming/img/TaskQueue.jpg" alt="消息队列"></li>
</ul>
</li>
<li><p>异步编程的几种方式：</p>
<ul>
<li><p>回调地狱：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;XXX1&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="regexp">//</span> callback 函数体</span><br><span class="line">ajax(<span class="string">&#x27;XXX2&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="regexp">//</span> callback 函数体</span><br><span class="line">   ajax(<span class="string">&#x27;XXX3&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="regexp">//</span> callback 函数体</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>缺点：回调地狱，不能用 try catch 捕获错误，不能 return</p>
</li>
<li><p>回调地狱的根本问题在于：</p>
</li>
<li><p>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</p>
</li>
<li><p>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（控制反转）</p>
</li>
<li><p>嵌套函数过多的多话，很难处理错误</p>
</li>
</ul>
</li>
<li><p>Promise：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;XXX1&#x27;</span>)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   <span class="keyword">return</span> ajax(<span class="string">&#x27;XXX2&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   <span class="keyword">return</span> ajax(<span class="string">&#x27;XXX3&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Promise 就是为了解决 callback 的问题而产生的。</p>
</li>
<li><p>Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装</p>
</li>
<li><p>优点：解决了回调地狱的问题</p>
</li>
<li><p>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</p>
</li>
</ul>
</li>
<li><p>Generator：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *fetch() &#123;</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX1&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX2&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX3&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> <span class="literal">it</span> = fetch()</span><br><span class="line">   <span class="keyword">let</span> result1 = <span class="literal">it</span>.next()</span><br><span class="line">   <span class="keyword">let</span> result2 = <span class="literal">it</span>.next()</span><br><span class="line">   <span class="keyword">let</span> result3 = <span class="literal">it</span>.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特点：可以控制函数的执行，可以配合 co 函数库使用</li>
</ul>
</li>
<li><p>Async/Await：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">async</span> <span class="variable">function</span> <span class="function"><span class="title">test</span>() &#123;</span></span><br><span class="line"><span class="function">   <span class="variable">await</span> <span class="title">fetch</span>(<span class="string">&#x27;XXX1&#x27;</span>)</span></span><br><span class="line">   <span class="variable">await</span> <span class="function"><span class="title">fetch</span>(<span class="string">&#x27;XXX2&#x27;</span>)</span></span><br><span class="line">   <span class="variable">await</span> <span class="function"><span class="title">fetch</span>(<span class="string">&#x27;XXX3&#x27;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>async、await 是异步的终极解决方案</p>
</li>
<li><p>优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题</p>
</li>
<li><p>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Promise 异步方案、宏任务/微任务队列</p>
</li>
<li><p>Generator 异步方案、Async/Await 语法糖</p>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>function</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化简介</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/01-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h6 id="前端工程化呢，是指遵循一定的标准和规范，通过工具降低成本、提高效率的一种手段。"><a href="#前端工程化呢，是指遵循一定的标准和规范，通过工具降低成本、提高效率的一种手段。" class="headerlink" title="前端工程化呢，是指遵循一定的标准和规范，通过工具降低成本、提高效率的一种手段。"></a>前端工程化呢，是指遵循一定的标准和规范，通过工具降低成本、提高效率的一种手段。</h6><p>因为前端应用要求不断提高，这些年也被经常探讨。</p>
<ol>
<li><p>前端工程化，也是为了解决我们目前存在的一些问题？<br>（1）想用 es6 新语法，但是有兼容性问题<br>（2）想用 less 或者是 sass 增强 css 的编程性，但是运行环境不支持<br>（3）想用模块化的方式提高项目的可维护性，但是运行环境不能直接支持</p>
<a id="more"></a>

</li>
</ol>
<p>另外，还有我们在开发完成后，上线前需要手动压缩、合并代码及资源文件，部署过程需要手动上传代码到服务器。这种的手动操作呢，会出现各种各样的问题。在多人开发过程中，我们很难统一大家的代码风格，从仓库 pull 下来的代码也无法保证质量。</p>
<p>包括我们在开发一些功能时，需要等待后台服务接口提前完成。这些都是我们在前端开发中，所遇到的一些问题。归结来看呢，前端工程化，可以帮助我们解决以下几点问题：</p>
<ul>
<li>传统语言或语法的弊端</li>
<li>无法使用模块化/组件化</li>
<li>重复的机械式工作</li>
<li>代码风格统一、质量保证</li>
<li>依赖后端服务接口支持</li>
<li>整体依赖后端项目</li>
</ul>
<ol start="2">
<li><p>工程化表现：<br> 它可以帮助我们提高效率，降低成本，保证质量</p>
<p> <img src="/images/2020-12-17/1.png" alt="avatar"></p>
<p> 我们可以从以上几个方面入手：</p>
<p> 创建项目阶段：使用脚手架工具，生成项目结构和特定类型文件</p>
<p> 编码阶段：自动化格式化代码，校验代码风格，编译、构建以及打包</p>
<p> 预览/调试阶段：借助现代化的 web server，提供热更新的体验。通过 source map，定位代码问题。还可以在后台接口未提供之前，自己 mock 数据。</p>
<p> 提交阶段：可以通过 git hooks，做代码质量检查。可以对提交日志（git log），做格式限制。</p>
<p> 部署阶段：用一行命令代替手动 ftp 上传，并且实现持续集成，自动化部署。</p>
</li>
<li><p>但是，我们说工程化不等于工具</p>
<p> 工具不是工程化的核心，工程化的核心，指的应该是项目整体的一种规划，或者说是架构。工具只是我们在实现工程化过程当中，使用的一种手段。</p>
<p> 比如说，我们要规范文件的组织结构，代码文件的开发范式（语法、规范、标准），通过什么样的方式作前后端分离。</p>
<p> 我们要考虑搭配哪些工具，做哪些具体的配置选项，来实现工程化整体的一个规划。</p>
<p> 以下是我们常用的成熟的工程化集成：</p>
<p> <img src="/images/2020-12-17/2.png" alt="avatar"></p>
</li>
<li><p>前端的工程化，应该归功于 node.js</p>
<p> 我们平时用的工具，基本上都是 node.js 开发的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端脚手架工具简介</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/02-%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h6 id="我们说，脚手架的本质所用，就是用来帮我们创建一个基础的项目结构，给我们提供项目规范和约定。"><a href="#我们说，脚手架的本质所用，就是用来帮我们创建一个基础的项目结构，给我们提供项目规范和约定。" class="headerlink" title="我们说，脚手架的本质所用，就是用来帮我们创建一个基础的项目结构，给我们提供项目规范和约定。"></a>我们说，脚手架的本质所用，就是用来帮我们创建一个基础的项目结构，给我们提供项目规范和约定。</h6><p>在一个项目中，我们可能会有：</p>
<p>相同的组织结构<br>相同的开发范式<br>相同的模块依赖<br>相同的工具配置<br>相同的基础代码</p>
  <a id="more"></a>

<p>这就造成，我们在开发一个新的项目时，有大量的重复操作要做，脚手架工具就是帮助我们来解决这类问题的。</p>
<p>比如，以下截图就是我们通过脚手架生成的一个项目结构：</p>
<p><img src="/images/2020-12-17/3.png" alt="avatar"></p>
<p>我们来看下常用的脚手架工具有哪些：</p>
<p>react 项目 -&gt; create-react-app<br>vue 项目 -&gt; vue-cli<br>angular 项目 -&gt; angular-cli</p>
<p>通用型脚手架生成工具：Yeoman（灵活，方便扩展）<br>它是用于创造现代化 web 应用的脚手架工具，不同于其他脚手架工具，yeoman 更像是一个脚手架运行平台。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>Yeoman的基本使用</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/03-Yeoman%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>（1）在全局范围安装 yo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install yo -g</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/4.png" alt="avatar"></p>
  <a id="more"></a>

<p>(2) 安装对应的 generator</p>
<p>npm install generator-node -g</p>
<p><img src="/images/2020-12-17/5.png" alt="avatar"></p>
<p>(3) 创建一个新的文件夹：mkdir eryang-module</p>
<p>(4) 进入文件夹： cd eryang-module</p>
<p>(5) 通过 yo 运行 generator</p>
<p>yo node</p>
<p>根据命令行交互填写完成，生成一个目录结构，如下图：</p>
<p><img src="/images/2020-12-17/6.png" alt="avatar"></p>
<p><img src="/images/2020-12-17/7.png" alt="avatar"></p>
<h2 id="Yeoman-常规使用步骤"><a href="#Yeoman-常规使用步骤" class="headerlink" title="Yeoman 常规使用步骤"></a>Yeoman 常规使用步骤</h2><ul>
<li>明确需求</li>
<li>找到合适的 Generator</li>
<li>全局范围安装找到的 Generator</li>
<li>通过 yo 运行对应的 Generator</li>
<li>通过命令行交互填写选项</li>
<li>生成所需要的项目结构</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Generator</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/04-%E8%87%AA%E5%AE%9A%E4%B9%89Generator/</url>
    <content><![CDATA[<h2 id="创建-Generator-模块"><a href="#创建-Generator-模块" class="headerlink" title="创建 Generator 模块"></a>创建 Generator 模块</h2><p>本质上就是一个 npm 模块</p>
<p><img src="/images/2020-12-17/8.png" alt="avatar"></p>
<p>Generator 有基本结构，需要有一个 generators 文件夹，app 文件夹里放生成器所对应的代码</p>
<p><img src="/images/2020-12-17/9.png" alt="avatar"></p>
<p>如果有多个 sub Generator，可以在 app 同级创建新的一个生成器目录</p>
  <a id="more"></a>

<p><img src="/images/2020-12-17/10.png" alt="avatar"></p>
<p>Yeoman 的生成器模块名称必须是：generator-&lt; name &gt; 这样的格式</p>
<p>(1) 创建一个文件夹：mkdir generator-eryang<br>(2) 进入文件夹：cd generator-eryang<br>(3) 初始化 package.json：npm init<br>(4) 安装 yeoman-generator 模块，它是我们创建生成器的一个基类：npm install yeoman-generator</p>
<p><img src="/images/2020-12-17/11.png" alt="avatar"></p>
<p>(4) 按照结构要求创建 generators/app/index.js 文件</p>
<ul>
<li>index.js 作为 Generator 的核心入口</li>
<li>需要导出一个继承自 Generator 的类型</li>
<li>Yeoman Generator 在工作时会自动调用我们在此类型中一些生命周期方法</li>
<li>我们在这些方法中可以通过调用父类中的一些工具方法实现一些功能，比如文件写入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">&quot;yeoman-generator&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> (</span></span><br><span class="line"><span class="class">  <span class="title">Generator</span></span></span><br><span class="line"><span class="class">) </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">writing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fs.write(<span class="built_in">this</span>.destinationPath(<span class="string">&quot;temp.txt&quot;</span>), <span class="built_in">Math</span>.random().toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>(5) 通过 npm link 方式，把这个模块链接到全局范围，使之成为一个全局模块包。这样，yeoman 在工作的时候，可以找到我们所创建的 generator-eryang 模块。</p>
<p>接下来，我们通过命令来测试一下。</p>
<p>（1）首先创建一个新的目录：mkdir my-pro<br>（2）进入目录文件夹：cd my-pro<br>（3）然后运行命令：yo eryang</p>
<p><img src="/images/2020-12-17/12.png" alt="avatar"></p>
<p><img src="/images/2020-12-17/13.png" alt="avatar"></p>
<p><img src="/images/2020-12-17/14.png" alt="avatar"></p>
<p>最后，我们在 my-pro 看到，生成了一个 temp.txt 文件，文件里就是我们所写入的内容</p>
<h2 id="根据模版创建文件"><a href="#根据模版创建文件" class="headerlink" title="根据模版创建文件"></a>根据模版创建文件</h2><p>因为很多时候，我们需要创建的文件有很多，而且文件的内容也相对复杂。那针对这样一种情况，我们可以使用模版去创建文件。</p>
<p>（1）首先在生成器目录下，添加一个 templates 目录<br>（2）然后将我们需要生成的文件，全部放入这个目录里，作为模版，内部可以使用 EJ 模版标记输出数据，例如：&lt;%= title %&gt;，其他的 EJS 语法也支持。</p>
<p>接下来，我们来以下具体实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">&quot;yeoman-generator&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> (</span></span><br><span class="line"><span class="class">  <span class="title">Generator</span></span></span><br><span class="line"><span class="class">) </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">writing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过模版方式写入文件到目标目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板文件路径</span></span><br><span class="line">    <span class="keyword">const</span> temp = <span class="built_in">this</span>.templatePath(<span class="string">&quot;foo.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 输出目标路径</span></span><br><span class="line">    <span class="keyword">const</span> output = <span class="built_in">this</span>.destinationPath(<span class="string">&quot;foo.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 模板数据上下文</span></span><br><span class="line">    <span class="keyword">const</span> context = &#123; <span class="attr">title</span>: <span class="string">&quot;hello&quot;</span>, <span class="attr">success</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.fs.copyTpl(temp, output, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>运行：yo eryang，我们会看到文件夹中新生成 foo.txt 文件</p>
<p><img src="/images/2020-12-17/15.png" alt="avatar"></p>
<p>相对于手动创建每一个文件，模板的方式大大的提高了效率，特别是在文件比较多，比较复杂的情况下。</p>
<h2 id="接受用户输入数据"><a href="#接受用户输入数据" class="headerlink" title="接受用户输入数据"></a>接受用户输入数据</h2><p>像项目中的动态数据，我们一般通过命令行交互的方式，去询问我们的使用者从而得到，比如标题，项目的名称。prompting 方法，帮助我们实现这些功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">&quot;yeoman-generator&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> (</span></span><br><span class="line"><span class="class">  <span class="title">Generator</span></span></span><br><span class="line"><span class="class">) </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">prompting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Yeoman在询问用户环节会自动调用此方法</span></span><br><span class="line">    <span class="comment">// 在此方法中可以调用父类的prompt()发出对用户的命令行询问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prompt([</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">        message: <span class="string">&quot;your project name&quot;</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">this</span>.appname, <span class="comment">// 项目生成目录名称</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]).then(<span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// answers = &#123;name : &#x27;user input value&#x27;&#125;</span></span><br><span class="line">      <span class="built_in">this</span>.answers = answer;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">writing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过模版方式写入文件到目标目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板文件路径</span></span><br><span class="line">    <span class="keyword">const</span> temp = <span class="built_in">this</span>.templatePath(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">    <span class="comment">// 输出目标路径</span></span><br><span class="line">    <span class="keyword">const</span> output = <span class="built_in">this</span>.destinationPath(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">    <span class="comment">// 模板数据上下文</span></span><br><span class="line">    <span class="keyword">const</span> context = <span class="built_in">this</span>.answers;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.fs.copyTpl(temp, output, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再次运行：yo eryang，我们首先会收到命令行的提示信息：? your project name: my pro<br>默认为：my pro，然后我们回复完之后，文件夹中依新生成 index.html 文件，并且&lt;%= name %&gt;已被替换为我们所回复的 my pro。</p>
<p><img src="/images/2020-12-17/16.png" alt="avatar"></p>
<p>模版文件</p>
<p><img src="/images/2020-12-17/17.png" alt="avatar"></p>
<p>生成后文件</p>
<p><img src="/images/2020-12-17/18.png" alt="avatar"></p>
<h2 id="发布-Generator"><a href="#发布-Generator" class="headerlink" title="发布 Generator"></a>发布 Generator</h2><p>实际上是发布一个 npm 模块（通过 npm publish 命令实现）</p>
<p><img src="/images/2020-12-17/19.png" alt="avatar"></p>
<p>(1）首先我们先忽略 node_modules 文件夹：echo node-modules &gt; .gitignore<br>(2）然后初始化 git，创建一个空仓库：git init</p>
<p><img src="/images/2020-12-17/20.png" alt="avatar"></p>
<p>(3) 添加文件：git add .<br>(4) 完成一次提交：git commit -m ‘feat: init’</p>
<p><img src="/images/2020-12-17/21.png" alt="avatar"></p>
<p>(5) 打开 github.com，创建一个远端仓库，名字叫做 generator-eryang</p>
<p>(6) 为本地仓库添加一个远端仓库的别名：git remote add origin <a href="https://github.com/eryangboy/generator-eryang.git">https://github.com/eryangboy/generator-eryang.git</a></p>
<p><img src="/images/2020-12-17/22.png" alt="avatar"></p>
<p>(7) 推送到远端仓库：git push -u origin master</p>
<p><img src="/images/2020-12-17/25.png" alt="avatar"></p>
<p>(8) 发布模块: npm publish</p>
<h3 id="snpm-publish-发布失败常见错误总结："><a href="#snpm-publish-发布失败常见错误总结：" class="headerlink" title="ßnpm publish 发布失败常见错误总结："></a>ßnpm publish 发布失败常见错误总结：</h3><ul>
<li><p>版本号重复，无法发布<br>解决方案：修改 package.json 里面的 version 字段。</p>
</li>
<li><p>没有 adduser<br>没有权限导致发布失败，解决方案是：npm adduser，然后输入用户名、密码、邮箱。</p>
</li>
<li><p>registry 不对，需要配置镜像地址<br>镜像地址如果配置的是淘宝，而你需要发布到的是 npm 官方仓库，这个时候需要修改你的 registry。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=http://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/23.png" alt="avatar"></p>
<p><img src="/images/2020-12-17/24.png" alt="avatar"></p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>Plop简介</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/05-Plop%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Plog 用来创建重复文件，可以提高我们的开发效率</p>
<p>plopfile.js 为 Plop 入口文件，需要导出一个函数<br>此函数接收一个 plop 对象，用于创建生成器任务</p>
<ul>
<li>将 plop 模块作为项目开发依赖安装</li>
<li>在项目根目录下创建一个 plopfile.js 文件</li>
<li>在 plopfile.js 文件中定义脚手架任务</li>
<li>编写用于生成特定类型文件的模板</li>
<li>通过 Plop 提供的 CLI 运行脚手架任务</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架的工作原理</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/06-%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="脚手架的工作原理："><a href="#脚手架的工作原理：" class="headerlink" title="脚手架的工作原理："></a>脚手架的工作原理：</h2><ul>
<li>通过命令行交互查询用户问题</li>
<li>根据用户回答的结果生成文件</li>
</ul>
<p>(1) 首先呢，我们创建一个文件夹：mkdir sample-scaffolding<br>(2) 进入文件夹目录：cd sample-scaffolding<br>(3) 初始化 package.json 文件：npm init<br>(4) 在 package.json 文件中指定 cli 应用的入口文件</p>
  <a id="more"></a>

<p><img src="/images/2020-12-17/26.png" alt="avator"></p>
<p>(5) 创建 cli.js 文件，并且设置头部为 #!/usr/bin/env node</p>
<p><img src="/images/2020-12-17/27.png" alt="avator"></p>
<p>(6) 通过 npm link 链接到全局</p>
<p>(7) 配置询问用户信息，需要安装 inquirur 模块：npm install inquirur<br>(8) 配置过程，详细看以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node CLI 应用入口文件必须要有这样的文件头</span></span><br><span class="line"><span class="comment">// 如果是 Linux 或者 maxOS 系统下还要修改此文件的读写权限为 755</span></span><br><span class="line"><span class="comment">// 具体通过 chmod 755 cli.js 实现修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 脚手架的工作过程：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(&quot;cli working&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inquirur = <span class="built_in">require</span>(<span class="string">&quot;inquirer&quot;</span>); <span class="comment">// 询问用户信息模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>); <span class="comment">// 模版引擎</span></span><br><span class="line"></span><br><span class="line">inquirur</span><br><span class="line">  .prompt([</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&quot;input&quot;</span>, <span class="comment">// 问题输入方式</span></span><br><span class="line">      name: <span class="string">&quot;name&quot;</span>, <span class="comment">// 问题返回的键</span></span><br><span class="line">      message: <span class="string">&quot;your project name&quot;</span>, <span class="comment">// 提示信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  .then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// answers 为用户回答的答案</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户回答的结果生成文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(answers);</span></span><br><span class="line">    <span class="comment">// _dirname 为当前目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板目录</span></span><br><span class="line">    <span class="keyword">const</span> tmplDir = path.join(__dirname, <span class="string">&quot;templates&quot;</span>);</span><br><span class="line">    <span class="comment">// console.log(__dirname, tmplDir);</span></span><br><span class="line">    <span class="comment">// /Users/eryang/sample-scaffolding /Users/eryang/sample-scaffolding/templates</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标目录</span></span><br><span class="line">    <span class="keyword">const</span> destDir = process.cwd();</span><br><span class="line">    <span class="comment">// console.log(destDir);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将模板下的文件，全部放到目标目录</span></span><br><span class="line">    fs.readdir(tmplDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="comment">//   console.log(files);   --   [ &#x27;index.html&#x27;, &#x27;style.css&#x27; ]</span></span><br><span class="line">      files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过模版引擎渲染文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// renderFile参数为：路径，数据，回调函数</span></span><br><span class="line">        ejs.renderFile(path.join(tmplDir, file), answers, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="comment">//   console.log(result);</span></span><br><span class="line">          <span class="comment">// 将结果写入目标文件路径</span></span><br><span class="line">          fs.writeFileSync(path.join(destDir, file), result);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化构建简介</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/07-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h1><p>说白了，就是把我们开发阶段的源代码，自动化的去转换成生产环境可以运行的代码或者程序。<br>我们一般称它为：自动化构建工作流</p>
<p><img src="/images/2020-12-17/28.png" alt="avatar"></p>
<p>它的作用，是让我们脱离运行环境兼容带来的种种问题，在开发阶段使用提高效率的语法、规范和标准</p>
  <a id="more"></a>

<h3 id="常用的自动化构建工具"><a href="#常用的自动化构建工具" class="headerlink" title="常用的自动化构建工具"></a>常用的自动化构建工具</h3><ul>
<li><p>grunt 是最早的前端构建系统，插件生态完善，但是它的工作过程是基于临时文件实现的，所以构建速度较慢，例如：用它对工程中的 sass 文件的构建，一般会对 sass 文件做编译操作，再去添加一些私有属性的前缀，再去压缩代码。这些步骤 grunt 每一步都有磁盘读取操作。</p>
</li>
<li><p>Gulp 基于内存实现的，对文件的处理都是在内存中实现，速度快一些，默认同时支持多个任务，这是当下最流行的。</p>
</li>
<li><p>Fis 是百度前端团队研发的，最早只是在内部使用，适合初学者</p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp基本使用</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/08-gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="gulp-基本使用"><a href="#gulp-基本使用" class="headerlink" title="gulp 基本使用"></a>gulp 基本使用</h2><p>当下最流行的前端构建系统，高效、易用</p>
<ol>
<li><p>初始化 package.json：npm init -yes</p>
</li>
<li><p>安装 gulp：npm install gulp -dev</p>
</li>
<li><p>创建入口文件 gulpfile.js</p>
</li>
<li><p>需要导出一个函数</p>
<a id="more"></a>

</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.foo = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;gulp working&quot;</span>);</span><br><span class="line">  done(); <span class="comment">// 标识任务完成</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/29.png" alt="avator"></p>
<p>执行 gulp foo，会报一个错误，这是因为 gulp 约定每一个任务都是异步任务，需要调用一个回调参数标记任务完成</p>
<h3 id="gulp-创建组合任务"><a href="#gulp-创建组合任务" class="headerlink" title="gulp 创建组合任务"></a>gulp 创建组合任务</h3><ul>
<li>series：串行任务结构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task1 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task2 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task3 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task3 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.foo = series(task1, task2, task3);</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/30.png" alt="avator"></p>
<ul>
<li>parallel：并行任务结构</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task1 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task2 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task3 = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;task3 working~&quot;</span>);</span><br><span class="line">    done();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.foo = parallel(task1, task2, task3);</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/31.png" alt="avator"></p>
<h3 id="gulp-异步任务的三种方式"><a href="#gulp-异步任务的三种方式" class="headerlink" title="gulp 异步任务的三种方式"></a>gulp 异步任务的三种方式</h3><ol>
<li>第一种是回调方式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.callback = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;calback task&quot;</span>);</span><br><span class="line">  done();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想阻止剩下任务执行，可以 done(一个错误)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.callback_error = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;calback task&quot;</span>);</span><br><span class="line">  done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;task failed));</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种是 Promise</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.promise = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise task&quot;</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想阻止剩下任务执行，可以 reject(一个错误)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.promise_error = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;calback task&quot;</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;promise failed&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>第三种是 Async/await</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeout = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.async = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async task&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="gulp-构建过程核心工作原理"><a href="#gulp-构建过程核心工作原理" class="headerlink" title="gulp 构建过程核心工作原理"></a>gulp 构建过程核心工作原理</h3><ol>
<li>首先是复制操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 文件读取流</span></span><br><span class="line">  <span class="keyword">const</span> read = fs.createReadStream(<span class="string">&quot;normalize.css&quot;</span>);</span><br><span class="line">  <span class="comment">// 文件写入流</span></span><br><span class="line">  <span class="keyword">const</span> write = fs.createWriteStream(<span class="string">&quot;normalize.min.css&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把读取出来的文件读取流导入到文件写入流</span></span><br><span class="line">  read.pipe(write);</span><br><span class="line">  <span class="keyword">return</span> read;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后是转换操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">&quot;stream&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 文件读取流</span></span><br><span class="line">  <span class="keyword">const</span> read = fs.createReadStream(<span class="string">&quot;normalize.css&quot;</span>);</span><br><span class="line">  <span class="comment">// 文件写入流</span></span><br><span class="line">  <span class="keyword">const</span> write = fs.createWriteStream(<span class="string">&quot;normalize.min.css&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件转换流</span></span><br><span class="line">  <span class="keyword">const</span> transform = <span class="keyword">new</span> Transform(&#123;</span><br><span class="line">    transform: <span class="function">(<span class="params">chunk, encoding, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 核心转换过程实现</span></span><br><span class="line">      <span class="comment">// chunk：读取流中读取到的内容（Buffer）</span></span><br><span class="line">      <span class="keyword">const</span> input = chunk.toString();</span><br><span class="line">      <span class="keyword">const</span> output = input.replace(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\/\*.+?\*\//g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      callback(<span class="literal">null</span>, output); <span class="comment">// 错误优先，没有错误传入null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把读取出来的文件读取流导入到文件写入流</span></span><br><span class="line">  read</span><br><span class="line">    .pipe(transform) <span class="comment">// 转换</span></span><br><span class="line">    .pipe(write); <span class="comment">// 写入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020-12-17/32.png" alt="avator"></p>
<h3 id="gulp-文件操作-api-和插件的使用"><a href="#gulp-文件操作-api-和插件的使用" class="headerlink" title="gulp 文件操作 api 和插件的使用"></a>gulp 文件操作 api 和插件的使用</h3><ol>
<li>复制操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/*.css&quot;</span>).pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>转换操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cssClean = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&quot;gulp-rename&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/*.css&quot;</span>)</span><br><span class="line">    .pipe(cssClean())</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp自动化构建案例</title>
    <url>/notes/notes/%E5%A4%A7%E5%89%8D%E7%AB%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/09-gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="gulp-自动化构建案例"><a href="#gulp-自动化构建案例" class="headerlink" title="gulp 自动化构建案例"></a>gulp 自动化构建案例</h1><ol>
<li>首先安装 gulp，作为开发依赖</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> gulp -dev</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>处理 sass 文件</p>
<a id="more"></a>
</li>
</ol>
<ul>
<li>通过 src，dest 定位 sass 文件位置</li>
<li>通过 base:src 保留原始目录结构</li>
<li>通过 gulp-sass 插件转换 sass 文件</li>
<li>通过 outputStyle: “expanded”展开 css 代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/assets/styles/*.scss&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src&quot;</span> &#125;)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&quot;expanded&quot;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>处理 js 脚本 文件</li>
</ol>
<ul>
<li>通过 src，dest 定位 js 文件位置</li>
<li>通过 base:src 保留原始目录结构</li>
<li>通过 gulp-babel,@babel/core,@babel/preset-env 插件转换 js 文件</li>
<li>babel 只是一个平台，需要配置 presets: [“@babel/preset-env”]</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/assets/scripts/*.js&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src&quot;</span> &#125;)</span><br><span class="line">    .pipe(babel(&#123; <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>处理 html 文件</li>
</ol>
<ul>
<li>通过 src，dest 定位 html 文件位置</li>
<li>通过 base:src 保留原始目录结构</li>
<li>通过 gulp-swig 插件编译 html 文件</li>
<li>swig 中的 data 参数用来传递数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> page = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/*.html&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src&quot;</span> &#125;)</span><br><span class="line">    .pipe(swig(&#123; data &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>处理图片文件</li>
</ol>
<ul>
<li>通过 src，dest 定位图片文件位置</li>
<li>通过 base:src 保留原始目录结构</li>
<li>通过 gulp-imagemin 插件压缩图片文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> image = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/assets/images/2020-12-17/2020-12-17/**&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src&quot;</span> &#125;)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>处理字体文件</li>
</ol>
<ul>
<li>通过 src，dest 定位字体文件位置</li>
<li>通过 base:src 保留原始目录结构</li>
<li>通过 gulp-imagemin 插件压缩字体文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> font = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;src/assets/fonts/**&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src&quot;</span> &#125;)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>处理其他文件文件</li>
</ol>
<ul>
<li>通过 src，dest 定位其他文件位置</li>
<li>通过 base:public 保留原始目录结构</li>
<li>将 public 下的所有文件拷贝至目标目录</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> extra = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&quot;public/**&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;public&quot;</span> &#125;).pipe(dest(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>清除操作</li>
</ol>
<ul>
<li>通过 del 插件清除目标文件夹</li>
<li>先执行 chean 操作，再进行编译</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clean = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">&quot;dist&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> build = series(clean, parallel(compile, extra));</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>自动加载插件</li>
</ol>
<ul>
<li>loadPlugins 为一个方法</li>
<li>插件名为驼峰式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loadPlugins = <span class="built_in">require</span>(<span class="string">&quot;gulp-load-plugins&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> plugins = loadPlugins();</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>热更新开发服务器</li>
</ol>
<ul>
<li>通过 browser-sync 插件完成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器</span></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// init 初始化服务器配置</span></span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>, <span class="comment">// 关闭提示</span></span><br><span class="line">    files: <span class="string">&quot;dist/**&quot;</span>, <span class="comment">// 监视需要更新的文件</span></span><br><span class="line">    port: <span class="number">10086</span>,</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">      routes: &#123; <span class="string">&quot;/node_modules&quot;</span>: <span class="string">&quot;node_modules&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>监视变化</li>
</ol>
<ul>
<li>通过 watch 完成</li>
<li>style，script，page 在开发阶段需要去执行</li>
<li>image，font，extra 在开发阶段不需要去执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> serve = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  watch(<span class="string">&quot;src/assets/styles/*.scss&quot;</span>, style);</span><br><span class="line">  watch(<span class="string">&quot;src/assets/scripts/*.js&quot;</span>, script);</span><br><span class="line">  watch(<span class="string">&quot;src/*.html&quot;</span>, page);</span><br><span class="line">  <span class="comment">//   watch(&quot;src/assets/images/2020-12-17/2020-12-17/**&quot;, image);</span></span><br><span class="line">  <span class="comment">//   watch(&quot;src/assets/fonts/**&quot;, font);</span></span><br><span class="line">  <span class="comment">//   watch(&quot;public/**&quot;, extra);</span></span><br><span class="line"></span><br><span class="line">  watch(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;src/assets/images/2020-12-17/2020-12-17/**&quot;</span>,</span><br><span class="line">      <span class="string">&quot;src/assets/fonts/**&quot;</span>,</span><br><span class="line">      <span class="string">&quot;public/**&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    bs.reload</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init 初始化服务器配置</span></span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>, <span class="comment">// 关闭提示</span></span><br><span class="line">    files: <span class="string">&quot;dist/**&quot;</span>, <span class="comment">// 监视需要更新的文件</span></span><br><span class="line">    port: <span class="number">10086</span>,</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: [<span class="string">&quot;dist&quot;</span>, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;public&quot;</span>],</span><br><span class="line">      routes: &#123; <span class="string">&quot;/node_modules&quot;</span>: <span class="string">&quot;node_modules&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>useref</li>
</ol>
<ul>
<li>自动处理 html 中的构建注释</li>
<li>自动将开始标签和结束标签之间的文件，自动打包到一个文件里</li>
<li>分别压缩 html，js，css 文件</li>
<li>通过 gulp-if 判断不同的类型</li>
<li>通过 gulp-htmlmin,gulp-uglify,gulp-clean-css 做不同的操作</li>
<li>需要一个临时目录：temp</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    src(<span class="string">&quot;temp/*.html&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;temp&quot;</span> &#125;)</span><br><span class="line">      .pipe(plugins.useref(&#123; <span class="attr">searchPath</span>: [<span class="string">&quot;temp&quot;</span>, <span class="string">&quot;.&quot;</span>] &#125;))</span><br><span class="line">      <span class="comment">// 此处会有三种类型，html，js，css,判断类型，分别做不同的操作</span></span><br><span class="line">      .pipe(plugins.if(<span class="regexp">/\.js$/</span>, plugins.uglify()))</span><br><span class="line">      .pipe(plugins.if(<span class="regexp">/\.css$/</span>, plugins.cleanCss()))</span><br><span class="line">      .pipe(</span><br><span class="line">        plugins.if(</span><br><span class="line">          /\.html$/,</span><br><span class="line">          plugins.htmlmin(&#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 压缩HTML</span></span><br><span class="line">            minifyJS: <span class="literal">true</span>, <span class="comment">// 压缩页面JS</span></span><br><span class="line">            minifyCSS: <span class="literal">true</span>, <span class="comment">// 压缩页面CSS</span></span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">      .pipe(dest(<span class="string">&quot;dist&quot;</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>重新规划构建过程</li>
</ol>
<ul>
<li>先 compile，后 userif</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> build = series(</span><br><span class="line">  clean, <span class="comment">// 先compile，后useref</span></span><br><span class="line">  parallel(series(compile, useref), image, font, extra)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>补充</li>
</ol>
<ul>
<li>将没有必要对外暴露的任务去掉</li>
<li>将命令放在 scripts 里</li>
<li>“clean”: “gulp clean”, “build”: “gulp build”,”develop”: “gulp develop “</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build,</span><br><span class="line">  clean,</span><br><span class="line">  develop,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="封装工作流"><a href="#封装工作流" class="headerlink" title="封装工作流"></a>封装工作流</h1>]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 新特性与 TypeScript、JS 性能优化</title>
    <url>/notes/notes/typescript/</url>
    <content><![CDATA[<h1 id="ES-新特性"><a href="#ES-新特性" class="headerlink" title="ES 新特性"></a>ES 新特性</h1><ul>
<li><p>ECMAScript 是 JavaScript 的扩展语言</p>
</li>
<li><p>JavaScript = ECMAScript + webapi(BOM,DOM)</p>
</li>
<li><p>ES2015 称之为 ES6</p>
</li>
<li><p>不是程序中的方法，而是数学中的函数</p>
</li>
<li><a id="more"></a>
</li>
<li><p>解决原有语法上的一些问题或者不足</p>
</li>
<li><p>对原有语法进行加强</p>
</li>
<li><p>全新的对象，全新的方法，全新的功能</p>
</li>
<li><p>全新的数据类型和数据结构</p>
</li>
</ul>
<ol>
<li><p>let 与块级作用域<br> 作用域：全局作用域，函数作用域，块级作用域</p>
<p> let 是块级作用域<br> 不会变量提升<br> 暂时性死区<br> 不允许重复声明</p>
</li>
<li><p> const：常量 声明过后不可以再修改</p>
</li>
<li><p>数组的解构<br> let arr = [1, 2, 3]<br> const [a,b,c] = arr</p>
</li>
<li><p> 对象的结构</p>
</li>
</ol>
<p>const obj = { name: “zhangsan”, age: 22 };<br>const { name} = obj;</p>
<p>默认值 const obj = { age: 22 };<br>const { name: _name = “lise” } = obj;</p>
<ol start="5">
<li><p>模版字符串<br>const name = ‘zhangsan’<br>const str = <code>hello $&#123;name&#125;</code></p>
</li>
<li><p>带标签的模板字符串</p>
</li>
</ol>
<p>// 模板字符串的标签就是一个特殊的函数，可以用来实现模板引擎<br>// 使用这个标签就是调用这个函数<br>// const str = console.log<code>hello world</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTagFunc</span> (<span class="params">strings, name, gender</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(strings, name, gender)</span></span><br><span class="line"><span class="comment">// return &#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sex = gender ? <span class="string">&#x27;man&#x27;</span> : <span class="string">&#x27;woman&#x27;</span></span><br><span class="line"><span class="keyword">return</span> strings[<span class="number">0</span>] + name + strings[<span class="number">1</span>] + sex + strings[<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = myTagFunc<span class="string">`hey, <span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;gender&#125;</span>.`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>对象字面量，方括号里面的执行结果作为对象属性名</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">    [Math.<span class="built_in">random</span>]: <span class="string">&#x27;hh&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Object.assign 可传入任意参数，第一个为目标对象，返回值就是目标对象，三等号为 true</p>
</li>
<li><p>Object.is 可以比较 NaN，Object.is(NaN,NaN)为 true</p>
</li>
<li><p>proxy 可以通过 set get 方法监听对象属性赋值和读取</p>
</li>
</ol>
<blockquote>
<p>与 definedProperty 对比：definedProperty 只能监听读写，但是 proxy 可以监听多种操作</p>
</blockquote>
<blockquote>
<p>proxy 还可以监视数组</p>
</blockquote>
<ol start="11">
<li><p>Reflect 统一对象的操作方式</p>
</li>
<li><p>静态方法中的 this 指向当前类型</p>
</li>
<li><p>set 可以链式调用 s.add().add().add()。数组展开符后可以直接跟一个 set 对象</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[... new Set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])]</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p>map 和对象类似，对象的键值只能是字符串和 Symbol，map 的键值可以是任意类型。set 方法存，get 方法取</p>
</li>
<li><p>Symbol 可以用来模拟对象的私有成员。为对象添加一个独一无二的属性，因为每次新建 Symbol 都不一样。<br>Symbol.for(‘’)只要传入的字符串相等，生成的 Symbol 对象就一样<br><code>Symbol.for(&#39;1&#39;) === Symbol.for(1) // true const obj = &#123; [Symbol.toStringTag]: &#39;XObject&#39;, [Symbol]: &#39;Symbol value&#39; &#125; obj.toString() // [object XObject] Object.getOwnPropertySymbols(obj) // 这样才能获取到Symbol类型的属性，Object.keys只能获取字符串类型的属性名</code></p>
</li>
<li><p>for of 循环可以使用 break 终止循环。forEach 不行。可以循环 Set，Map。遍历 map 会返回数组，含有 key 和 value。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历对象，实现可迭代模式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    store: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> result = &#123;</span><br><span class="line">                    value: self.store[index],</span><br><span class="line">                    done: index &gt;= self.store.length</span><br><span class="line">                &#125;</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>迭代器用途：对外提供统一遍历接口</p>
</li>
<li><p>生成器对象也实现了 iterator 接口。应用：发号器，不断自增一不用担心死循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用生成器函数实现iterator方法</span></span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [...this.store]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> all) &#123;</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><ul>
<li>新增数组 includes 方法，可以判断是否有 NaN，indexOf 却不行</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>]</span><br><span class="line">a.indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// 输出-1</span></span><br><span class="line">a.includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新增指数运算符 **</li>
</ul>
<h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><ul>
<li><p>Object.values<br>返回对象中所有值</p>
</li>
<li><p>Object.entries<br>数组形式返回对象所有键值对。可以直接 for of 循环；可以将一个对象转换成 map 类型</p>
</li>
<li><p>Object.getOwnPropertyDescriptor<br>用 Object.assign 复制的时候可以获取完整描述，配合 get set 方法使用</p>
</li>
</ul>
<h1 id="TypeScript-语言"><a href="#TypeScript-语言" class="headerlink" title="TypeScript 语言"></a>TypeScript 语言</h1><ol>
<li><p>强类型和弱类型（类型安全）<br>强类型：形参和实参类型必须相同，不允许有任意的隐式类型转换<br>弱类型：不会限制实参的类型，允许有任意的隐式类型转换</p>
</li>
<li><p>静态类型和动态类型（类型检查）<br>静态类型：一个变量在声明时，类型就是明确的，声明过后，不可以再修改<br>动态类型：运行阶段，才可以明确变量的类型，声明过后，还可以修改</p>
<p>js 是弱类型和动态类型，缺乏了类型系统的可靠性</p>
</li>
<li><p>弱类型的问题</p>
<ol>
<li>类型异常只能等到运行时发现</li>
<li>类型不明确造成函数功能发生改变</li>
<li>类型不明确造成对象属性值的错误用法</li>
</ol>
<p>强类型的优势</p>
<ul>
<li>错误提早暴露</li>
<li>代码更智能，编码更准确</li>
<li>重构更牢靠</li>
<li>减少不必要的类型判断</li>
</ul>
</li>
<li><p>Flow js 的类型检查器</p>
</li>
</ol>
<h3 id="静态类型和动态类型（类型检查角度）"><a href="#静态类型和动态类型（类型检查角度）" class="headerlink" title="静态类型和动态类型（类型检查角度）"></a>静态类型和动态类型（类型检查角度）</h3><h3 id="Flow，JavaScript-类型检查器（2014，Facebook）"><a href="#Flow，JavaScript-类型检查器（2014，Facebook）" class="headerlink" title="Flow，JavaScript 类型检查器（2014，Facebook）"></a>Flow，JavaScript 类型检查器（2014，Facebook）</h3><p>通过类型注解来控制类型，类型不符合保存后 Flow 语法就可以检测出来异常</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">sum</span> (a:number,b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flow 类型推断：根据代码中使用情况推断出类型</p>
<p>类型注解示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> (<span class="params">a:<span class="built_in">string</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;s&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: <span class="built_in">string</span> = <span class="string">&#x27;sdf&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">number</span> = <span class="literal">NaN</span></span><br><span class="line"><span class="keyword">const</span> c: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> d: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> e: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> f: symbol = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1: Arry&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 元祖</span></span><br><span class="line"><span class="keyword">const</span> foo: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;foo&#x27;</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">// 指定属性名</span></span><br><span class="line"><span class="keyword">const</span> obj:&#123;foo?: <span class="built_in">string</span>, <span class="attr">bar</span>: <span class="built_in">number</span>&#125; = &#123;<span class="attr">bar</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="comment">// 不指定属性名，只指定类型</span></span><br><span class="line"><span class="keyword">const</span> obj1: &#123;[<span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123;&#125;</span><br><span class="line">obj1.key = <span class="string">&#x27;value&#x27;</span></span><br><span class="line">obj1.key1 = <span class="number">100</span> <span class="comment">// 错误，上面规定是字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">callback: (<span class="built_in">string</span>, <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    callback(<span class="string">&#x27;string&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="function"><span class="keyword">function</span> (<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// str =&gt; string</span></span><br><span class="line">    <span class="comment">// n =&gt; number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊类型</span></span><br><span class="line"><span class="keyword">const</span> a: <span class="string">&#x27;foo&#x27;</span> = <span class="string">&#x27;foo&#x27;</span> <span class="comment">// 字面量只能是&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">type</span>: <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;warning&#x27;</span> | <span class="string">&#x27;danger&#x27;</span> = <span class="string">&#x27;success&#x27;</span> <span class="comment">// 联合类型，只能是这几种</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;s&#x27;</span> <span class="comment">// 联合类型，只能是字符串或者数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">// 可以定义类型的别名</span></span><br><span class="line"><span class="keyword">const</span> c: StringOrNumber = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gender: ?<span class="built_in">number</span> = <span class="literal">null</span> <span class="comment">// 表示可以接受number或者null或者undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mixed、any</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passMixed</span> (<span class="params">value: mixed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(value) === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// xxx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">passMixed(<span class="string">&#x27;sf&#x27;</span>)</span><br><span class="line">passMixed(<span class="number">100</span>) <span class="comment">// mixed相当于所有类型的联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passAny</span> (<span class="params">value: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样接受任意类型参数，any是弱类型，mixed是强类型（mixed一旦确定类型后就不可修改）</span></span><br></pre></td></tr></table></figure>

<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><ol>
<li><p>非严格模式下，允许 string，number，Boolean，void；类型的值为 null</p>
</li>
<li><p>ts 默认所有文件都处在一个全局作用域中，不同文件可以相互访问变量，所以很容易变量名冲突，解决方法就是使用模块式，变成模块作用域</p>
</li>
<li><p>对象 object 类型可以接受函数，对象，数组。如果想只接受对象，需要用对象字面量形式{foo:number,bar:string}</p>
</li>
<li><p>数组类型</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> <span class="params">(<span class="rest_arg">...args</span>: number[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce((prev, current) =&gt; prev + current, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>元组类型：固定长度固定类型的数组</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">18</span>, <span class="string">&#x27;zec&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>枚举类型：用对象模拟</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">status</span> &#123;</span></span><br><span class="line">    draft = <span class="number">0</span>,</span><br><span class="line">    published = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/ ts中enum关键字表示枚举类型</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 不指定值会默认从0开始累加</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 可以是数字或者字符串类型</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 枚举类型编译后会生成一个双向键值对对象</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const enum status &#123;</span></span><br><span class="line"><span class="regexp">    draft,</span></span><br><span class="line"><span class="regexp">    published</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 常量枚举，编译后会移除</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数类型</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sun</span><span class="params">(a:number,b:number)</span>: string </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数个数和类型都固定，如果想要参数个数不确定可以使用es6的默认参数或者剩余参数...表达式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式类型推断</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">let age = <span class="number">18</span> <span class="regexp">//</span> 隐式推断为number，之后再赋值其他类型会报错</span><br><span class="line">let foo; <span class="regexp">//</span> 声明变量没有赋值，则推断为any类型</span><br></pre></td></tr></table></figure></li>
<li><p>类型断言：明确告诉 ts 变量的类型</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const nums = [<span class="number">110</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">112</span>]</span><br><span class="line">const <span class="keyword">res</span> = nums.<span class="keyword">find</span>(i =&gt; i &gt; <span class="number">0</span>) // <span class="keyword">ts</span>推断<span class="keyword">res</span>类型为<span class="keyword">number</span>或者undefined</span><br><span class="line">const num1 = <span class="keyword">res</span> <span class="keyword">as</span> <span class="keyword">number</span> // 明确<span class="keyword">res</span>是一个<span class="keyword">number</span>类型</span><br><span class="line">const num2 = <span class="symbol">&lt;number&gt;</span><span class="keyword">res</span> // 这种方式与JSX语法冲突</span><br></pre></td></tr></table></figure></li>
<li><p>接口：用来约束对象的结构，对象实现一个接口，必须拥有这个接口定义的成员。编译后没有</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Post &#123;</span><br><span class="line">    title: <span class="built_in">string</span></span><br><span class="line">    content: <span class="built_in">string</span></span><br><span class="line">    subtitle?: <span class="built_in">string</span> <span class="comment">// 可选成员</span></span><br><span class="line">    <span class="keyword">readonly</span> summary: <span class="built_in">string</span> <span class="comment">// 只读成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPost</span> (<span class="params">post: Post</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(post.title)</span><br><span class="line">    <span class="built_in">console</span>.log(post.content)</span><br><span class="line">    post.summary = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 报错，不允许修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示要求传入的post参数必须要有title，content</span></span><br><span class="line">printPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 动态成员</span></span><br><span class="line"><span class="keyword">interface</span> Cachee &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cache: Cachee = &#123;&#125;</span><br><span class="line">cache[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// 接口约束方法</span></span><br><span class="line"><span class="keyword">interface</span> Eat &#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Run &#123;</span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现接口的类必须有接口中定义的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Eat</span>, <span class="title">Run</span> </span>&#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类：必须显示定义属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">&#x27;init name&#x27;</span> <span class="comment">// 公有成员，默认</span></span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span> <span class="comment">// 私有成员，只能内部访问,子类成员不可以访问</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> gender: <span class="built_in">boolean</span> <span class="comment">// 受保护成员，外部不能访问，子类成员可以访问。只读属性，不可修改</span></span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">        <span class="built_in">this</span>.gender = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHi (msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Person(<span class="string">&#x27;tom&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">tom.age <span class="comment">// 报错</span></span><br><span class="line">tom.gender <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类：可以包含具体的实现，接口不包含。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能被继承不能new实例对象</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;吃&#x27;</span> + food)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> run (distance: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    run(distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;run &#x27;</span> + distance)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Dog()</span><br><span class="line">d.eat(<span class="string">&#x27;香肠&#x27;</span>)</span><br><span class="line">d.run(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>泛型。定义函数，接口或者类的时候，没有指定具体的类型，使用时再指定具体类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将类型变成参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt; (<span class="params">length: <span class="built_in">number</span>, value: T</span>):<span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Array</span>&lt;T&gt;(length).fill(value)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = createArray&lt;<span class="built_in">number</span>&gt;(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> arr2 = createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>类型声明</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">camelCase</span><span class="params">(input:<span class="keyword">string</span>)</span>:</span> <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h2 id="JavaScript-性能优化"><a href="#JavaScript-性能优化" class="headerlink" title="JavaScript 性能优化"></a>JavaScript 性能优化</h2><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ol>
<li><p>js 中内存管理是自动的</p>
</li>
<li><p>对象不再被引用时是垃圾</p>
</li>
<li><p>对象不能从根上访问到时是垃圾</p>
<p><strong>可达对象：1.可以访问到的对象就是可达对象 2.可达标准是从根出发是否能被找到 3.js 中的根可以理解为全局变量对象</strong></p>
</li>
</ol>
<h3 id="GC-算法"><a href="#GC-算法" class="headerlink" title="GC 算法"></a>GC 算法</h3><ol>
<li><p>引用计数算法</p>
<ul>
<li>核心思想：设置引用数，判断当前引用数是否为 0</li>
<li>引用计数器</li>
<li>引用关系改变时修改引用数字</li>
<li>引用数字为 0 时立即回收</li>
</ul>
</li>
<li><p>引用计数算法优缺点</p>
<ul>
<li>发现垃圾时立即回收</li>
<li>最大限度减少程序暂停</li>
<li>无法回收循环引用的对象</li>
<li>时间开销大</li>
</ul>
</li>
<li><p>标记清除算法</p>
<ul>
<li>核心思想：分标记和清除两个阶段完成</li>
<li>遍历所有对象找标记活动对象（递归查找）</li>
<li>遍历所有对象清除没有标记的对象，同时把第一次遍历所做的标记抹掉</li>
<li>把回收的空间放到空闲列表上面，方便后续程序申请空间使用</li>
</ul>
</li>
<li><p>标记清除算法优缺点</p>
<ul>
<li>可以解决循环引用的对象</li>
<li>地址不连续，空间碎片化</li>
</ul>
</li>
<li><p>标记整理算法</p>
<ul>
<li>是标记清除的增强</li>
<li>标记阶段的操作和标记清除一致</li>
<li>清除阶段会先执行整理，移动对象位置</li>
</ul>
</li>
<li><p>V8 引擎</p>
<ul>
<li>即时编译</li>
<li>V8 内存设限 64 位 1.5G 32 位 800M</li>
</ul>
</li>
<li><p>V8 垃圾回收策略</p>
<ul>
<li>采用分代回收的思想</li>
<li>内存分为新生代、老生代</li>
<li>针对不同对象采用不同算法<ol>
<li>分代回收</li>
<li>空间复制</li>
<li>标记清除</li>
<li>标记整理</li>
<li>标记增量</li>
</ol>
</li>
</ul>
</li>
<li><p>V8 内存分配</p>
<ul>
<li>V8 内存空间一分为二</li>
<li>小空间用于存储新生代对象（64 位：32M | 32 位：16M）</li>
<li>新生代指的是存活时间较短的对象（局部作用域中的变量）</li>
</ul>
</li>
<li><p>新生代对象回收实现</p>
<ul>
<li>回收过程采用复制算法 + 整理标记</li>
<li>新生代内存区分为两个等大小空间</li>
<li>使用空间为 From，空闲空间为 To</li>
<li>所有对象存储于 From 空间（包括活动对象和非活动对象）</li>
<li>当 From 空间应用到一定程度后会触发 GC 机制，标记整理后将活动对象拷贝至 To</li>
<li>From 完成释放（From 和 To 交换空间）</li>
</ul>
<p>回收细节说明：</p>
<ol>
<li>拷贝过程中可能出现晋升</li>
<li>晋升就是讲新生代对象移动至老生代</li>
<li>一轮 GC 还存活的新生代需要晋升</li>
<li>To 空间的使用率超过 25%需要晋升至老生代</li>
</ol>
</li>
<li><p>老生代对象回收</p>
<ul>
<li>老生代对象存放在右侧老生代区域</li>
<li>64 位限制 1.4G，32 位限制 700M</li>
<li>老生代对象就是指存活时间较长的对象（全局变量，闭包）<br>实现过程：</li>
</ul>
<ol>
<li>主要采用标记清除、标记整理、增量标记算法</li>
<li>首先使用标记清除完成垃圾空间的回收</li>
<li>采用标记整理进行空间优化（当新生代晋升老生代时，同时也发现老生代空间不够存新生代晋升过来的，就会进行标记整理空间优化）</li>
<li>采用增量标记进行效率优化（将标记过程分段进行）</li>
</ol>
</li>
<li><p>内存问题的外在表现</p>
<ul>
<li>页面出现延迟加载或经常性暂停</li>
<li>页面持续性出现糟糕的性能（内存膨胀，分配的内存超过机器能力）</li>
<li>页面的性能随时间延长越来越差（内存泄漏）</li>
</ul>
</li>
<li><p>监控内存的几种方法<br>界定内存问题的标准</p>
<ul>
<li>内存泄漏：内存使用持续升高</li>
<li>内存膨胀：在多数设备上都存在性能问题</li>
<li>频繁垃圾回收：通过内存变化图进行分析</li>
</ul>
<p>监控方式：</p>
<ol>
<li>浏览器任务管理器</li>
<li>TImeline 时序图记录</li>
<li>堆块照查找分离 DOM（分离 DOM 存在是一种内存泄漏）</li>
<li>判断是否存在频繁的垃圾回收</li>
</ol>
</li>
<li><p>什么是分离 DOM</p>
<ul>
<li>界面元素存活在 DOM 树上</li>
<li>垃圾对象时的 DOM 节点</li>
<li>分离状态的 DOM 节点</li>
</ul>
</li>
</ol>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><ol>
<li>慎用全局变量<ul>
<li>所有作用域链的顶端，所以会比较耗时，尽量放在局部作用域</li>
<li>不利于 GC 机制，耗内存</li>
<li>全局变量命名污染</li>
</ul>
</li>
<li>缓存全局变量</li>
<li>通过原型新增方法来替代构造函数中新增方法</li>
<li>避开闭包陷阱（容易内存泄漏）</li>
<li>避免属性访问方法使用</li>
<li>for 循环优化。将长度缓存</li>
<li>采用最优循环方式：简单遍历的话 foreach 优于 for 优于 for in</li>
<li>节点添加优化（回流和重绘）：createDocumentFragment() 文档碎片方法优于直接添加到 body</li>
<li>克隆优化节点操作：cloneNode(false)</li>
<li>直接量替换 Object 操作<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 性能好</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">3</span>)</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>TypeScript</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
