<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>me</title>
    <url>/life/life/me/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>关于</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程与 JS 异步编程</title>
    <url>/notes/notes/functional-programming/</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ul>
<li>对运算过程进行抽象，用来描述数据(函数)的映射</li>
<li>不是程序中的方法，而是数学中的函数</li>
</ul>
<ol>
<li><p>函数是一等公民：</p>
<ul>
<li>函数可以存在变量中</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
</ol>
<ul>
<li>函数作为参数</li>
</ul>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">functionforEach (<span class="keyword">array</span>, <span class="function"><span class="keyword">fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">array</span>.length; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fn</span><span class="params">(<span class="keyword">array</span>[i])</span></span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数作为返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>高阶函数：</p>
<ul>
<li><p>可以把函数作为参数传递给另一个函数</p>
</li>
<li><p>可以把函数作为另一个函数的返回结果</p>
<ul>
<li><p>使用高阶函数的意义：<br>不用关注细节，只关注目标<br>用来抽象通用问题<br>使代码更简洁</p>
</li>
<li><p>常用的高阶函数：forEach，map，filter，every，some，find，findIndex，reduce，sort</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>闭包：</p>
<ul>
<li><p>函数和其周围的状态(词法环境)的引用捆绑在一起形成闭包</p>
</li>
<li><p>可以在另一个作用域中调用一个函数的内部函数并访问到该函数的作用域中的成员</p>
<ul>
<li>闭包的本质：函数在执行的时候会放到一个执行栈上当函数执行完毕之后会从执行栈上移除，但是堆上的作用域成员因为被外部引用不能释放，因此内部函数依然可以访问外部函数的成员</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯函数：</p>
<ul>
<li>相同的输入永远会得到相同的输出，而且没有任何可观察的副作用<ul>
<li>好处：可缓存，可测试，并行处理</li>
</ul>
</li>
</ul>
</li>
<li><p>副作用：</p>
<ul>
<li>副作用让一个函数变的不纯(如上例)，纯函数的根据相同的输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用。<ul>
<li>来源：配置文件，数据库，获取用户输入…</li>
</ul>
</li>
</ul>
</li>
<li><p>柯里化：</p>
<ul>
<li><p>当一个函数有多个参数的时候先传递一部分参数调用它（这部分参数以后永远不变）</p>
</li>
<li><p>然后返回一个新的函数接收剩余的参数，返回结果</p>
<ul>
<li>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</li>
<li>这是一种对函数参数的’缓存’</li>
<li>让函数变的更灵活，让函数的粒度更小</li>
<li>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li>
</ul>
</li>
</ul>
</li>
<li><p>函数组合：</p>
<ul>
<li>函数组合可以让我们把细粒度的函数重新组合生成一个新的函数<ul>
<li>如果一个函数要经过多个函数处理才能得到最终值，这个时候可以把中间过程的函数合并成一个函数</li>
<li>函数就像是数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li>
<li>函数组合默认是从右到左执行</li>
</ul>
</li>
</ul>
</li>
<li><p>管道</p>
</li>
<li><p>函子</p>
</li>
</ol>
<ul>
<li><p>容器：包含值和值的变形关系，这个变形关系就是函数</p>
</li>
<li><p>函子：是一个特殊的容器，通过一个普通的对象来实现，该对象有 map 方法，map 方法可以运行一个函数对值进行处理（变形关系）</p>
<ul>
<li>函数式编程的运算不直接操作值，而是由函子完成</li>
<li>函子就是一个实现了 map 契约的对象</li>
<li>我们可以把函子想象成一个盒子，这个盒子里封装了一个值</li>
<li>想要处理盒子中的值，我们需要给盒子的 map 方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理</li>
<li>最终 map 方法返回一个包含新值的盒子（函子）</li>
</ul>
</li>
<li><p>MayBe 函子的作用就是可以对外部的空值情况做处理（控制副作用在允许的范围）</p>
</li>
<li><p>异常会让函数变的不纯，Either 函子可以用来做异常处理</p>
</li>
<li><p>IO 函子可以把不纯的动作存储到 _value 中，延迟执行这个不纯的操作(惰性执行)，包装当前的操作纯，IO 函子可以把不纯的动作存储到 _value 中，延迟执行这个不纯的操作(惰性执行)，包装当前的操作纯</p>
</li>
<li><p>Pointed 函子是实现了 of 静态方法的函子，of 方法是为了避免使用 new 来创建对象，更深层的含义是 of 方法用来把值放到上下文 Context（把值放到容器中，使用 map 来处理值）</p>
</li>
<li><p>Monad 函子是可以变扁的 Pointed 函子，IO(IO(x))，一个函子如果具有 join 和 of 两个方法并遵守一些定律就是一个 Monad</p>
</li>
</ul>
<p>&nbsp;</p>
<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><ol>
<li><p>同步模式与异步模式</p>
<ul>
<li>单线程：在 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，一般称它为主线程。但是实际上还存在其他的线程，可以称之为工作线程。JS 的单线程能够提高工作效率。JavaScript 的主要用途是与用户互动，以及操作 DOM，这就决定了它只能是单线程。单线程意味着前一个任务结束，才会执行后一个任务。</li>
<li>同步：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。如果在函数 A 返回的时候，调用者就能够得到预期的结果（即拿到了预期的返回值或者看到了预期的效果），那么这个函数就是同步的</li>
<li>异步：不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。如果在函数 A 返回的时候，调用者还不能马上得到预期的结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的 。</li>
<li>同步与异步的区别：同步可以保证顺序一致，但是容易导致阻塞；异步可以解决阻塞问题，但是会改变顺序性。</li>
</ul>
</li>
<li><p>事件循环与消息队列</p>
<ul>
<li>事件循环：是指主线程重复从消息队列中取消息，执行的过程<br><img src="/notes/notes/functional-programming/img/EventLoop.jpg" alt="事件循环"></li>
<li>消息队列：是一个先进先出的队列，它里面存放这各种消息。<br><img src="/notes/notes/functional-programming/img/TaskQueue.jpg" alt="消息队列"></li>
</ul>
</li>
<li><p>异步编程的几种方式：</p>
<ul>
<li><p>回调地狱：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;XXX1&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="regexp">//</span> callback 函数体</span><br><span class="line">ajax(<span class="string">&#x27;XXX2&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="regexp">//</span> callback 函数体</span><br><span class="line">   ajax(<span class="string">&#x27;XXX3&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="regexp">//</span> callback 函数体</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>缺点：回调地狱，不能用 try catch 捕获错误，不能 return</p>
</li>
<li><p>回调地狱的根本问题在于：</p>
</li>
<li><p>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</p>
</li>
<li><p>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（控制反转）</p>
</li>
<li><p>嵌套函数过多的多话，很难处理错误</p>
</li>
</ul>
</li>
<li><p>Promise：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;XXX1&#x27;</span>)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   <span class="keyword">return</span> ajax(<span class="string">&#x27;XXX2&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   <span class="keyword">return</span> ajax(<span class="string">&#x27;XXX3&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 操作逻辑</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Promise 就是为了解决 callback 的问题而产生的。</p>
</li>
<li><p>Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装</p>
</li>
<li><p>优点：解决了回调地狱的问题</p>
</li>
<li><p>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</p>
</li>
</ul>
</li>
<li><p>Generator：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *fetch() &#123;</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX1&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX2&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   <span class="keyword">yield</span> ajax(<span class="string">&#x27;XXX3&#x27;</span>, () =&gt; &#123;&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> <span class="literal">it</span> = fetch()</span><br><span class="line">   <span class="keyword">let</span> result1 = <span class="literal">it</span>.next()</span><br><span class="line">   <span class="keyword">let</span> result2 = <span class="literal">it</span>.next()</span><br><span class="line">   <span class="keyword">let</span> result3 = <span class="literal">it</span>.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特点：可以控制函数的执行，可以配合 co 函数库使用</li>
</ul>
</li>
<li><p>Async/Await：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">async</span> <span class="variable">function</span> <span class="function"><span class="title">test</span>() &#123;</span></span><br><span class="line"><span class="function">   <span class="variable">await</span> <span class="title">fetch</span>(<span class="string">&#x27;XXX1&#x27;</span>)</span></span><br><span class="line">   <span class="variable">await</span> <span class="function"><span class="title">fetch</span>(<span class="string">&#x27;XXX2&#x27;</span>)</span></span><br><span class="line">   <span class="variable">await</span> <span class="function"><span class="title">fetch</span>(<span class="string">&#x27;XXX3&#x27;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>async、await 是异步的终极解决方案</p>
</li>
<li><p>优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题</p>
</li>
<li><p>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Promise 异步方案、宏任务/微任务队列</p>
</li>
<li><p>Generator 异步方案、Async/Await 语法糖</p>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>function</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 新特性与 TypeScript、JS 性能优化</title>
    <url>/notes/notes/typescript/</url>
    <content><![CDATA[<h1 id="ES-新特性"><a href="#ES-新特性" class="headerlink" title="ES 新特性"></a>ES 新特性</h1><ul>
<li><p>ECMAScript 是 JavaScript 的扩展语言</p>
</li>
<li><p>JavaScript = ECMAScript + webapi(BOM,DOM)</p>
</li>
<li><p>ES2015 称之为 ES6</p>
</li>
<li><p>不是程序中的方法，而是数学中的函数</p>
</li>
<li><a id="more"></a>
</li>
<li><p>解决原有语法上的一些问题或者不足</p>
</li>
<li><p>对原有语法进行加强</p>
</li>
<li><p>全新的对象，全新的方法，全新的功能</p>
</li>
<li><p>全新的数据类型和数据结构</p>
</li>
</ul>
<ol>
<li><p>let 与块级作用域<br> 作用域：全局作用域，函数作用域，块级作用域</p>
<p> let 是块级作用域<br> 不会变量提升<br> 暂时性死区<br> 不允许重复声明</p>
</li>
<li><p> const：常量 声明过后不可以再修改</p>
</li>
<li><p>数组的解构<br> let arr = [1, 2, 3]<br> const [a,b,c] = arr</p>
</li>
<li><p> 对象的结构</p>
</li>
</ol>
<p>const obj = { name: “zhangsan”, age: 22 };<br>const { name} = obj;</p>
<p>默认值 const obj = { age: 22 };<br>const { name: _name = “lise” } = obj;</p>
<ol start="5">
<li><p>模版字符串<br>const name = ‘zhangsan’<br>const str = <code>hello $&#123;name&#125;</code></p>
</li>
<li><p>带标签的模板字符串</p>
</li>
</ol>
<p>// 模板字符串的标签就是一个特殊的函数，可以用来实现模板引擎<br>// 使用这个标签就是调用这个函数<br>// const str = console.log<code>hello world</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTagFunc</span> (<span class="params">strings, name, gender</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(strings, name, gender)</span></span><br><span class="line"><span class="comment">// return &#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sex = gender ? <span class="string">&#x27;man&#x27;</span> : <span class="string">&#x27;woman&#x27;</span></span><br><span class="line"><span class="keyword">return</span> strings[<span class="number">0</span>] + name + strings[<span class="number">1</span>] + sex + strings[<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = myTagFunc<span class="string">`hey, <span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;gender&#125;</span>.`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>对象字面量，方括号里面的执行结果作为对象属性名</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">    [Math.<span class="built_in">random</span>]: <span class="string">&#x27;hh&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Object.assign 可传入任意参数，第一个为目标对象，返回值就是目标对象，三等号为 true</p>
</li>
<li><p>Object.is 可以比较 NaN，Object.is(NaN,NaN)为 true</p>
</li>
<li><p>proxy 可以通过 set get 方法监听对象属性赋值和读取</p>
</li>
</ol>
<blockquote>
<p>与 definedProperty 对比：definedProperty 只能监听读写，但是 proxy 可以监听多种操作</p>
</blockquote>
<blockquote>
<p>proxy 还可以监视数组</p>
</blockquote>
<ol start="11">
<li><p>Reflect 统一对象的操作方式</p>
</li>
<li><p>静态方法中的 this 指向当前类型</p>
</li>
<li><p>set 可以链式调用 s.add().add().add()。数组展开符后可以直接跟一个 set 对象</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[... new Set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])]</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p>map 和对象类似，对象的键值只能是字符串和 Symbol，map 的键值可以是任意类型。set 方法存，get 方法取</p>
</li>
<li><p>Symbol 可以用来模拟对象的私有成员。为对象添加一个独一无二的属性，因为每次新建 Symbol 都不一样。<br>Symbol.for(‘’)只要传入的字符串相等，生成的 Symbol 对象就一样<br><code>Symbol.for(&#39;1&#39;) === Symbol.for(1) // true const obj = &#123; [Symbol.toStringTag]: &#39;XObject&#39;, [Symbol]: &#39;Symbol value&#39; &#125; obj.toString() // [object XObject] Object.getOwnPropertySymbols(obj) // 这样才能获取到Symbol类型的属性，Object.keys只能获取字符串类型的属性名</code></p>
</li>
<li><p>for of 循环可以使用 break 终止循环。forEach 不行。可以循环 Set，Map。遍历 map 会返回数组，含有 key 和 value。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历对象，实现可迭代模式</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    store: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> result = &#123;</span><br><span class="line">                    value: self.store[index],</span><br><span class="line">                    done: index &gt;= self.store.length</span><br><span class="line">                &#125;</span><br><span class="line">                index++</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>迭代器用途：对外提供统一遍历接口</p>
</li>
<li><p>生成器对象也实现了 iterator 接口。应用：发号器，不断自增一不用担心死循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用生成器函数实现iterator方法</span></span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> all = [...this.store]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> all) &#123;</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><ul>
<li>新增数组 includes 方法，可以判断是否有 NaN，indexOf 却不行</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>]</span><br><span class="line">a.indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// 输出-1</span></span><br><span class="line">a.includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新增指数运算符 **</li>
</ul>
<h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><ul>
<li><p>Object.values<br>返回对象中所有值</p>
</li>
<li><p>Object.entries<br>数组形式返回对象所有键值对。可以直接 for of 循环；可以将一个对象转换成 map 类型</p>
</li>
<li><p>Object.getOwnPropertyDescriptor<br>用 Object.assign 复制的时候可以获取完整描述，配合 get set 方法使用</p>
</li>
</ul>
<h1 id="TypeScript-语言"><a href="#TypeScript-语言" class="headerlink" title="TypeScript 语言"></a>TypeScript 语言</h1><ol>
<li><p>强类型和弱类型（类型安全）<br>强类型：形参和实参类型必须相同，不允许有任意的隐式类型转换<br>弱类型：不会限制实参的类型，允许有任意的隐式类型转换</p>
</li>
<li><p>静态类型和动态类型（类型检查）<br>静态类型：一个变量在声明时，类型就是明确的，声明过后，不可以再修改<br>动态类型：运行阶段，才可以明确变量的类型，声明过后，还可以修改</p>
<p>js 是弱类型和动态类型，缺乏了类型系统的可靠性</p>
</li>
<li><p>弱类型的问题</p>
<ol>
<li>类型异常只能等到运行时发现</li>
<li>类型不明确造成函数功能发生改变</li>
<li>类型不明确造成对象属性值的错误用法</li>
</ol>
<p>强类型的优势</p>
<ul>
<li>错误提早暴露</li>
<li>代码更智能，编码更准确</li>
<li>重构更牢靠</li>
<li>减少不必要的类型判断</li>
</ul>
</li>
<li><p>Flow js 的类型检查器</p>
</li>
</ol>
<h3 id="静态类型和动态类型（类型检查角度）"><a href="#静态类型和动态类型（类型检查角度）" class="headerlink" title="静态类型和动态类型（类型检查角度）"></a>静态类型和动态类型（类型检查角度）</h3><h3 id="Flow，JavaScript-类型检查器（2014，Facebook）"><a href="#Flow，JavaScript-类型检查器（2014，Facebook）" class="headerlink" title="Flow，JavaScript 类型检查器（2014，Facebook）"></a>Flow，JavaScript 类型检查器（2014，Facebook）</h3><p>通过类型注解来控制类型，类型不符合保存后 Flow 语法就可以检测出来异常</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">sum</span> (a:number,b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">a</span> + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flow 类型推断：根据代码中使用情况推断出类型</p>
<p>类型注解示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> (<span class="params">a:<span class="built_in">string</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;s&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: <span class="built_in">string</span> = <span class="string">&#x27;sdf&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">number</span> = <span class="literal">NaN</span></span><br><span class="line"><span class="keyword">const</span> c: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> d: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> e: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> f: symbol = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1: Arry&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 元祖</span></span><br><span class="line"><span class="keyword">const</span> foo: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;foo&#x27;</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">// 指定属性名</span></span><br><span class="line"><span class="keyword">const</span> obj:&#123;foo?: <span class="built_in">string</span>, <span class="attr">bar</span>: <span class="built_in">number</span>&#125; = &#123;<span class="attr">bar</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="comment">// 不指定属性名，只指定类型</span></span><br><span class="line"><span class="keyword">const</span> obj1: &#123;[<span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123;&#125;</span><br><span class="line">obj1.key = <span class="string">&#x27;value&#x27;</span></span><br><span class="line">obj1.key1 = <span class="number">100</span> <span class="comment">// 错误，上面规定是字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">callback: (<span class="built_in">string</span>, <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    callback(<span class="string">&#x27;string&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="function"><span class="keyword">function</span> (<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// str =&gt; string</span></span><br><span class="line">    <span class="comment">// n =&gt; number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊类型</span></span><br><span class="line"><span class="keyword">const</span> a: <span class="string">&#x27;foo&#x27;</span> = <span class="string">&#x27;foo&#x27;</span> <span class="comment">// 字面量只能是&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">type</span>: <span class="string">&#x27;success&#x27;</span> | <span class="string">&#x27;warning&#x27;</span> | <span class="string">&#x27;danger&#x27;</span> = <span class="string">&#x27;success&#x27;</span> <span class="comment">// 联合类型，只能是这几种</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;s&#x27;</span> <span class="comment">// 联合类型，只能是字符串或者数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">// 可以定义类型的别名</span></span><br><span class="line"><span class="keyword">const</span> c: StringOrNumber = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gender: ?<span class="built_in">number</span> = <span class="literal">null</span> <span class="comment">// 表示可以接受number或者null或者undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mixed、any</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passMixed</span> (<span class="params">value: mixed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(value) === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// xxx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">passMixed(<span class="string">&#x27;sf&#x27;</span>)</span><br><span class="line">passMixed(<span class="number">100</span>) <span class="comment">// mixed相当于所有类型的联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passAny</span> (<span class="params">value: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样接受任意类型参数，any是弱类型，mixed是强类型（mixed一旦确定类型后就不可修改）</span></span><br></pre></td></tr></table></figure>

<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><ol>
<li><p>非严格模式下，允许 string，number，Boolean，void；类型的值为 null</p>
</li>
<li><p>ts 默认所有文件都处在一个全局作用域中，不同文件可以相互访问变量，所以很容易变量名冲突，解决方法就是使用模块式，变成模块作用域</p>
</li>
<li><p>对象 object 类型可以接受函数，对象，数组。如果想只接受对象，需要用对象字面量形式{foo:number,bar:string}</p>
</li>
<li><p>数组类型</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> <span class="params">(<span class="rest_arg">...args</span>: number[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce((prev, current) =&gt; prev + current, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>元组类型：固定长度固定类型的数组</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">18</span>, <span class="string">&#x27;zec&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>枚举类型：用对象模拟</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">status</span> &#123;</span></span><br><span class="line">    draft = <span class="number">0</span>,</span><br><span class="line">    published = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/ ts中enum关键字表示枚举类型</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 不指定值会默认从0开始累加</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 可以是数字或者字符串类型</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 枚举类型编译后会生成一个双向键值对对象</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const enum status &#123;</span></span><br><span class="line"><span class="regexp">    draft,</span></span><br><span class="line"><span class="regexp">    published</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 常量枚举，编译后会移除</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数类型</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sun</span><span class="params">(a:number,b:number)</span>: string </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数个数和类型都固定，如果想要参数个数不确定可以使用es6的默认参数或者剩余参数...表达式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式类型推断</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">let age = <span class="number">18</span> <span class="regexp">//</span> 隐式推断为number，之后再赋值其他类型会报错</span><br><span class="line">let foo; <span class="regexp">//</span> 声明变量没有赋值，则推断为any类型</span><br></pre></td></tr></table></figure></li>
<li><p>类型断言：明确告诉 ts 变量的类型</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const nums = [<span class="number">110</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">112</span>]</span><br><span class="line">const <span class="keyword">res</span> = nums.<span class="keyword">find</span>(i =&gt; i &gt; <span class="number">0</span>) // <span class="keyword">ts</span>推断<span class="keyword">res</span>类型为<span class="keyword">number</span>或者undefined</span><br><span class="line">const num1 = <span class="keyword">res</span> <span class="keyword">as</span> <span class="keyword">number</span> // 明确<span class="keyword">res</span>是一个<span class="keyword">number</span>类型</span><br><span class="line">const num2 = <span class="symbol">&lt;number&gt;</span><span class="keyword">res</span> // 这种方式与JSX语法冲突</span><br></pre></td></tr></table></figure></li>
<li><p>接口：用来约束对象的结构，对象实现一个接口，必须拥有这个接口定义的成员。编译后没有</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Post &#123;</span><br><span class="line">    title: <span class="built_in">string</span></span><br><span class="line">    content: <span class="built_in">string</span></span><br><span class="line">    subtitle?: <span class="built_in">string</span> <span class="comment">// 可选成员</span></span><br><span class="line">    <span class="keyword">readonly</span> summary: <span class="built_in">string</span> <span class="comment">// 只读成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPost</span> (<span class="params">post: Post</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(post.title)</span><br><span class="line">    <span class="built_in">console</span>.log(post.content)</span><br><span class="line">    post.summary = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 报错，不允许修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示要求传入的post参数必须要有title，content</span></span><br><span class="line">printPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 动态成员</span></span><br><span class="line"><span class="keyword">interface</span> Cachee &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cache: Cachee = &#123;&#125;</span><br><span class="line">cache[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// 接口约束方法</span></span><br><span class="line"><span class="keyword">interface</span> Eat &#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Run &#123;</span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现接口的类必须有接口中定义的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Eat</span>, <span class="title">Run</span> </span>&#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    run (distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类：必须显示定义属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">&#x27;init name&#x27;</span> <span class="comment">// 公有成员，默认</span></span><br><span class="line">    <span class="keyword">private</span> age: <span class="built_in">number</span> <span class="comment">// 私有成员，只能内部访问,子类成员不可以访问</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> gender: <span class="built_in">boolean</span> <span class="comment">// 受保护成员，外部不能访问，子类成员可以访问。只读属性，不可修改</span></span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span> (<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">        <span class="built_in">this</span>.gender = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHi (msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Person(<span class="string">&#x27;tom&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">tom.age <span class="comment">// 报错</span></span><br><span class="line">tom.gender <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类：可以包含具体的实现，接口不包含。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能被继承不能new实例对象</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    eat (food: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;吃&#x27;</span> + food)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> run (distance: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    run(distance: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;run &#x27;</span> + distance)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Dog()</span><br><span class="line">d.eat(<span class="string">&#x27;香肠&#x27;</span>)</span><br><span class="line">d.run(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>泛型。定义函数，接口或者类的时候，没有指定具体的类型，使用时再指定具体类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将类型变成参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt; (<span class="params">length: <span class="built_in">number</span>, value: T</span>):<span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Array</span>&lt;T&gt;(length).fill(value)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr1 = createArray&lt;<span class="built_in">number</span>&gt;(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> arr2 = createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>类型声明</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">camelCase</span><span class="params">(input:<span class="keyword">string</span>)</span>:</span> <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h2 id="JavaScript-性能优化"><a href="#JavaScript-性能优化" class="headerlink" title="JavaScript 性能优化"></a>JavaScript 性能优化</h2><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ol>
<li><p>js 中内存管理是自动的</p>
</li>
<li><p>对象不再被引用时是垃圾</p>
</li>
<li><p>对象不能从根上访问到时是垃圾</p>
<p><strong>可达对象：1.可以访问到的对象就是可达对象 2.可达标准是从根出发是否能被找到 3.js 中的根可以理解为全局变量对象</strong></p>
</li>
</ol>
<h3 id="GC-算法"><a href="#GC-算法" class="headerlink" title="GC 算法"></a>GC 算法</h3><ol>
<li><p>引用计数算法</p>
<ul>
<li>核心思想：设置引用数，判断当前引用数是否为 0</li>
<li>引用计数器</li>
<li>引用关系改变时修改引用数字</li>
<li>引用数字为 0 时立即回收</li>
</ul>
</li>
<li><p>引用计数算法优缺点</p>
<ul>
<li>发现垃圾时立即回收</li>
<li>最大限度减少程序暂停</li>
<li>无法回收循环引用的对象</li>
<li>时间开销大</li>
</ul>
</li>
<li><p>标记清除算法</p>
<ul>
<li>核心思想：分标记和清除两个阶段完成</li>
<li>遍历所有对象找标记活动对象（递归查找）</li>
<li>遍历所有对象清除没有标记的对象，同时把第一次遍历所做的标记抹掉</li>
<li>把回收的空间放到空闲列表上面，方便后续程序申请空间使用</li>
</ul>
</li>
<li><p>标记清除算法优缺点</p>
<ul>
<li>可以解决循环引用的对象</li>
<li>地址不连续，空间碎片化</li>
</ul>
</li>
<li><p>标记整理算法</p>
<ul>
<li>是标记清除的增强</li>
<li>标记阶段的操作和标记清除一致</li>
<li>清除阶段会先执行整理，移动对象位置</li>
</ul>
</li>
<li><p>V8 引擎</p>
<ul>
<li>即时编译</li>
<li>V8 内存设限 64 位 1.5G 32 位 800M</li>
</ul>
</li>
<li><p>V8 垃圾回收策略</p>
<ul>
<li>采用分代回收的思想</li>
<li>内存分为新生代、老生代</li>
<li>针对不同对象采用不同算法<ol>
<li>分代回收</li>
<li>空间复制</li>
<li>标记清除</li>
<li>标记整理</li>
<li>标记增量</li>
</ol>
</li>
</ul>
</li>
<li><p>V8 内存分配</p>
<ul>
<li>V8 内存空间一分为二</li>
<li>小空间用于存储新生代对象（64 位：32M | 32 位：16M）</li>
<li>新生代指的是存活时间较短的对象（局部作用域中的变量）</li>
</ul>
</li>
<li><p>新生代对象回收实现</p>
<ul>
<li>回收过程采用复制算法 + 整理标记</li>
<li>新生代内存区分为两个等大小空间</li>
<li>使用空间为 From，空闲空间为 To</li>
<li>所有对象存储于 From 空间（包括活动对象和非活动对象）</li>
<li>当 From 空间应用到一定程度后会触发 GC 机制，标记整理后将活动对象拷贝至 To</li>
<li>From 完成释放（From 和 To 交换空间）</li>
</ul>
<p>回收细节说明：</p>
<ol>
<li>拷贝过程中可能出现晋升</li>
<li>晋升就是讲新生代对象移动至老生代</li>
<li>一轮 GC 还存活的新生代需要晋升</li>
<li>To 空间的使用率超过 25%需要晋升至老生代</li>
</ol>
</li>
<li><p>老生代对象回收</p>
<ul>
<li>老生代对象存放在右侧老生代区域</li>
<li>64 位限制 1.4G，32 位限制 700M</li>
<li>老生代对象就是指存活时间较长的对象（全局变量，闭包）<br>实现过程：</li>
</ul>
<ol>
<li>主要采用标记清除、标记整理、增量标记算法</li>
<li>首先使用标记清除完成垃圾空间的回收</li>
<li>采用标记整理进行空间优化（当新生代晋升老生代时，同时也发现老生代空间不够存新生代晋升过来的，就会进行标记整理空间优化）</li>
<li>采用增量标记进行效率优化（将标记过程分段进行）</li>
</ol>
</li>
<li><p>内存问题的外在表现</p>
<ul>
<li>页面出现延迟加载或经常性暂停</li>
<li>页面持续性出现糟糕的性能（内存膨胀，分配的内存超过机器能力）</li>
<li>页面的性能随时间延长越来越差（内存泄漏）</li>
</ul>
</li>
<li><p>监控内存的几种方法<br>界定内存问题的标准</p>
<ul>
<li>内存泄漏：内存使用持续升高</li>
<li>内存膨胀：在多数设备上都存在性能问题</li>
<li>频繁垃圾回收：通过内存变化图进行分析</li>
</ul>
<p>监控方式：</p>
<ol>
<li>浏览器任务管理器</li>
<li>TImeline 时序图记录</li>
<li>堆块照查找分离 DOM（分离 DOM 存在是一种内存泄漏）</li>
<li>判断是否存在频繁的垃圾回收</li>
</ol>
</li>
<li><p>什么是分离 DOM</p>
<ul>
<li>界面元素存活在 DOM 树上</li>
<li>垃圾对象时的 DOM 节点</li>
<li>分离状态的 DOM 节点</li>
</ul>
</li>
</ol>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><ol>
<li>慎用全局变量<ul>
<li>所有作用域链的顶端，所以会比较耗时，尽量放在局部作用域</li>
<li>不利于 GC 机制，耗内存</li>
<li>全局变量命名污染</li>
</ul>
</li>
<li>缓存全局变量</li>
<li>通过原型新增方法来替代构造函数中新增方法</li>
<li>避开闭包陷阱（容易内存泄漏）</li>
<li>避免属性访问方法使用</li>
<li>for 循环优化。将长度缓存</li>
<li>采用最优循环方式：简单遍历的话 foreach 优于 for 优于 for in</li>
<li>节点添加优化（回流和重绘）：createDocumentFragment() 文档碎片方法优于直接添加到 body</li>
<li>克隆优化节点操作：cloneNode(false)</li>
<li>直接量替换 Object 操作<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 性能好</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">3</span>)</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>TypeScript</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
